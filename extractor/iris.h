#pragma once

// clang-format off
// generated by build/Debug/_deps/sqlpp23-src/scripts/sqlpp23-ddl2cpp --path-to-ddl data/db/ddl.sql --namespace iris --path-to-header extractor/iris.h

#include <optional>

#include <sqlpp23/core/basic/table.h>
#include <sqlpp23/core/basic/table_columns.h>
#include <sqlpp23/core/name/create_name_tag.h>
#include <sqlpp23/core/type_traits.h>

namespace iris {
  struct Iris_ {
    struct Id {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(id, id);
      using data_type = ::sqlpp::integral;
      using has_default = std::true_type;
    };
    struct SepalL {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(sepal_l, sepalL);
      using data_type = std::optional<::sqlpp::floating_point>;
      using has_default = std::true_type;
    };
    struct SepalW {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(sepal_w, sepalW);
      using data_type = std::optional<::sqlpp::floating_point>;
      using has_default = std::true_type;
    };
    struct PetalL {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(petal_l, petalL);
      using data_type = std::optional<::sqlpp::floating_point>;
      using has_default = std::true_type;
    };
    struct PetalW {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(petal_w, petalW);
      using data_type = std::optional<::sqlpp::floating_point>;
      using has_default = std::true_type;
    };
    struct Specie {
      SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(specie, specie);
      using data_type = std::optional<::sqlpp::text>;
      using has_default = std::true_type;
    };
    SQLPP_CREATE_NAME_TAG_FOR_SQL_AND_CPP(iris, iris);
    template<typename T>
    using _table_columns = sqlpp::table_columns<T,
               Id,
               SepalL,
               SepalW,
               PetalL,
               PetalW,
               Specie>;
    using _required_insert_columns = sqlpp::detail::type_set<>;
  };
  using Iris = ::sqlpp::table_t<Iris_>;

} // namespace iris
